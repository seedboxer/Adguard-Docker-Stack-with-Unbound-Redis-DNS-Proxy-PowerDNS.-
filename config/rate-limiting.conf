# For more information see the unbound.conf documentation at
# https://nlnetlabs.nl/documentation/unbound/unbound.conf

server:
    # ratelimit: <number or 0>
    #     Enable ratelimiting of queries sent to nameserver  for  performing
    #     recursion.  If 0, the default, it is disabled.  This option is ex-
    #     perimental at this time.  The ratelimit is in queries  per  second
    #     that  are  allowed.   More  queries  are turned away with an error
    #     (servfail).  This stops recursive floods, eg. random query  names,
    #     but not spoofed reflection floods.  Cached responses are not rate-
    #     limited by this setting.  The zone of the query is  determined  by
    #     examining  the  nameservers  for it, the zone name is used to keep
    #     track of the rate.  For example, 1000 may be a suitable  value  to
    #     stop the server from being overloaded with random names, and keeps
    #     unbound from sending traffic to the nameservers for those zones.
    ratelimit: 1000

    # ratelimit-size: <memory size>
    #     Give the size of the data structure in which the  current  ongoing
    #     rates  are  kept  track in.  Default 4m.  In bytes or use m(mega),
    #     k(kilo), g(giga).  The ratelimit structure is small, so this  data
    #     structure likely does not need to be large.
    ratelimit-size: 8m

    # ratelimit-slabs: <number>
    #     Give  power of 2 number of slabs, this is used to reduce lock con-
    #     tention in the ratelimit tracking data structure.   Close  to  the
    #     number of cpus is a fairly good setting.
    ratelimit-slabs: 4

    # ratelimit-factor: <number>
    #     Set  the  amount  of  queries  to rate limit when the limit is ex-
    #     ceeded.  If set to 0, all queries are dropped  for  domains  where
    #     the  limit is exceeded.  If set to another value, 1 in that number
    #     is allowed through to complete.   Default  is  10,  allowing  1/10
    #     traffic to flow normally.  This can make ordinary queries complete
    #     (if repeatedly queried for), and enter the cache, whilst also mit-
    #     igating the traffic flow by the factor given.
    ratelimit-factor: 10

    # ip-ratelimit: <number or 0>
    #     Enable global ratelimiting of queries accepted per ip address.  If
    #     0,  the  default,  it is disabled.  This option is experimental at
    #     this time.  The ratelimit is in queries per second  that  are  al-
    #     lowed.  More queries are completely dropped and will not receive a
    #     reply, SERVFAIL or  otherwise.   IP  ratelimiting  happens  before
    #     looking in the cache. This may be useful for mitigating amplifica-
    #     tion attacks.
    ip-ratelimit: 100

    # ip-ratelimit-size: <memory size>
    #     Give the size of the data structure in which the  current  ongoing
    #     rates  are  kept  track in.  Default 4m.  In bytes or use m(mega),
    #     k(kilo), g(giga).  The ip ratelimit structure is  small,  so  this
    #     data structure likely does not need to be large.
    ip-ratelimit-size: 8m

    # ip-ratelimit-slabs: <number>
    #     Give  power of 2 number of slabs, this is used to reduce lock con-
    #     tention in the ip ratelimit tracking data structure.  Close to the
    #     number of cpus is a fairly good setting.
    ip-ratelimit-slabs: 4

    # ip-ratelimit-factor: <number>
    #     Set  the  amount  of  queries  to rate limit when the limit is ex-
    #     ceeded.  If set to 0, all queries are dropped for addresses  where
    #     the  limit is exceeded.  If set to another value, 1 in that number
    #     is allowed through to complete.   Default  is  10,  allowing  1/10
    #     traffic to flow normally.  This can make ordinary queries complete
    #     (if repeatedly queried for), and enter the cache, whilst also mit-
    #     igating the traffic flow by the factor given.
    ip-ratelimit-factor: 10

    # jostle-timeout: <msec>
    #     Timeout  used when the server is very busy.  Set to a value that
    #     usually results in one roundtrip to the authority  servers.   If
    #     too  many queries arrive, then 50% of the queries are allowed to
    #     run to completion, and the other 50% are replaced with  the  new
    #     incoming  query  if  they have already spent more than their al-
    #     lowed time.  This protects against denial  of  service  by  slow
    #     queries or high query rates.  Default 200 milliseconds.  The ef-
    #     fect is that the qps for long-lasting  queries  is  about  (num-
    #     queriesperthread  /  2)  /  (average time for such long queries)
    #     qps.  The qps  for  short  queries  can  be  about  (numqueries-
    #     perthread  /  2)  /  (jostletimeout  in  whole  seconds) qps per
    #     thread, about (1024/2)*5 = 2560 qps by default.
    jostle-timeout: 1000
